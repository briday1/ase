# Require current version of cmake or later.
cmake_minimum_required( VERSION "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" )

# Define the top level project name.
project( DEFAULT_PROJ_NAME )

# Add local cmake modules to the default cmake module path.
set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/" )

# Bring the header files into the project.
include_directories( include )

# Gather all the source files.
file( GLOB_RECURSE SOURCES "src/*.cpp" )

# Set appropriate output directories (for libraries and executables).
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build )

add_executable( testHelloWorld ${SOURCES})

# Check for Intel MKL.
find_package( MKL REQUIRED )
include_directories( ${MKL_INCLUDE_DIR} )

# Check if Doxygen is installed.
find_package( Doxygen )
if( DOXYGEN_FOUND )
  configure_file( ${CMAKE_SOURCE_DIR}/doc/Doxyfile.in
                  ${CMAKE_SOURCE_DIR}/doc/Doxyfile.out @ONLY )

  # Add custom target to the make file.
  add_custom_target( doc ALL
                     ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/doc/Doxyfile.out
                     WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/doc
                     COMMENT "Generating API documentation with Doxygen"
                     VERBATIM )
else( DOXYGEN_FOUND )
  message( STATUS "Doxygen is missing -- the documentation will not be built." )
endif( DOXYGEN_FOUND )
